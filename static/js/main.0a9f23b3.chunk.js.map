{"version":3,"sources":["Components/AddTodo.js","Components/pages/about.js","Components/TodoItem.js","Components/Todo.js","Components/Layouts/Header.js","App.js","serviceWorker.js","index.js"],"names":["AddTodo","state","title","onChange","e","setState","target","name","value","onSubmit","preventDefault","props","addTodo","this","style","display","marginLeft","marginRight","type","flex","padding","placeholder","className","Component","about","Fragment","TodoItem","getStyle","textAlign","borderBottom","backgroundColor","borderRadius","textDecoration","todo","completed","id","markComplete","bind","onClick","delTodo","btnStyle","background","color","border","float","cursor","Todo","todos","map","key","headerStyle","fontSize","Header","App","ompleted","Axios","delete","then","res","filter","post","data","get","path","render","About","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0a9f23b3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass AddTodo extends Component {\r\n    state = {\r\n        title: ''\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({ title: '' });\r\n    }\r\n    render() {\r\n        return ( \r\n   \r\n    <form onSubmit = { this.onSubmit }\r\n                        style = {\r\n                             {\r\n                                 display: 'flex',\r\n                                 marginLeft: '40px',\r\n                                 marginRight: '40px'\r\n                             }   \r\n                    }>\r\n\r\n            <input type = \"text \"\r\n                   name = \"title\"\r\n                   style = {{flex: '10', padding: '5px'}}\r\n                   placeholder = \"Add Todo.....\"\r\n                   className=\"add\"\r\n                   value = { this.state.title }\r\n                   onChange = { this.onChange }/>\r\n\r\n            <input type = \"submit\"\r\n                   value = \"Submit\"\r\n                   className = \"btn\"\r\n                   style = {{ flex: '1' }}/>\r\n     </form>\r\n  \r\n)}}\r\n\r\n//PropTypes\r\nAddTodo.propTypes = {\r\n    addTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddTodo;","import React, {Component} from 'react'\r\n\r\nclass about extends Component {\r\n    render() {\r\n        return (\r\n        <React.Fragment>\r\n            <h1> About </h1> \r\n            <p> This is a TodoList App! </p>\r\n        </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default about;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nclass TodoItem extends Component {\r\n    getStyle = () => {\r\n        return {\r\n            textAlign: 'left',\r\n            padding: '10px',\r\n            borderBottom: '1px #ccc dotted',\r\n            backgroundColor: '#f1f1f1',\r\n            marginLeft: '40px',\r\n            marginRight: '40px',\r\n            borderRadius: '5px',\r\n            textDecoration: this.props.todo.completed ?\r\n                'line-through' : 'none'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { id, title } = this.props.todo;\r\n        return (\r\n        <div className=\"input\">   \r\n            <div style = {\r\n                this.getStyle()}>\r\n            <input type = \"checkbox\"\r\n                   onChange = { this.props.markComplete.bind(this, id)}/> \r\n\r\n            { title } \r\n            \r\n            <button onClick = { this.props.delTodo.bind(this, id) }\r\n            style = { btnStyle }> X </button> \r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\n// PropTypes\r\n\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired,\r\n}\r\n\r\nconst btnStyle = {\r\n    background: 'red',\r\n    color: 'white',\r\n    border: 'none',\r\n    padding: '4px 8px',\r\n    borderRadius: '50%',\r\n    float: 'right',\r\n    cursor: 'pointer'\r\n}\r\n\r\nexport default TodoItem;"," import React, { Component } from 'react';\r\n import TodoItem from './TodoItem';\r\n import PropTypes from 'prop-types';\r\n\r\n class Todo extends Component {\r\n\r\n     render() {\r\n             return this.props.todos.map((todo) => (\r\n            <TodoItem key = { todo.id }\r\n                      todo = { todo }\r\n                      markComplete = { this.props.markComplete }\r\n                      delTodo = { this.props.delTodo }/>));\r\n                 }\r\n             }\r\n\r\n\r\n//PropTypes\r\n    Todo.propTypes = {\r\n    todos: PropTypes.array.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired\r\n    }\r\n\r\nexport default Todo","import React from 'react'\r\n\r\nfunction Header() {\r\n    return ( < header style = { headerStyle } > < h1 > TodoList < /h1>< /header > )\r\n}\r\n\r\nconst headerStyle = {\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px',\r\n    fontSize: '1.5em',\r\n    marginLeft: '40px',\r\n    marginRight: '40px',\r\n    borderRadius: '5px'\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n//import UUID from 'react-uuid';\n\nimport './App.css';\nimport Axios from 'axios';\nimport AddTodo from './Components/AddTodo';\nimport About from './Components/pages/about'\nimport Todos from './Components/Todo';\nimport Header from './Components/Layouts/Header';\n// uuid is used to generate random id\nclass App extends Component {\n    state = {\n        todos: [ //{\n            //         id: UUID(),\n            //         title: 'Gyming',\n            //         completed: false\n            //     },\n            //     {\n            //         id: UUID(),\n            //         title: 'Webinar at 5 p.m',\n            //         completed: false\n            //     },\n            //     {\n            //         id: UUID(),\n            //         title: 'Meeting with boss',\n            //         completed: false\n            //     }\n        ]\n    }\n\n    // fetch the todos from the api (jsonplaceholder)\n    componentDidMount() {\n        Axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\n            .then(res => this.setState({ todos: res.data }))\n    }\n\n    // cutting the completed task from the todo-list\n    markComplete = (id) => {\n        this.setState({\n            todos: this.state.todos.map(todo => {\n                if (todo.id === id) {\n                    todo.completed = !todo.ompleted\n                }\n                return todo;\n            })\n        });\n    }\n\n    //Deleting Todo-Item from the list\n\n    delTodo = (id) => {\n        Axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n            .then(res => this.setState({\n                todos: [...this.state.todos.filter(\n                    todo => todo.id !== id\n                )]\n            }));\n\n    }\n\n    // Add Todo\n\n    addTodo = (title) => {\n        // const newTodo = {\n        //     id: UUID(),\n        //     title,\n        //     completed: false\n        // }\n        Axios.post('https://jsonplaceholder.typicode.com/todos', {\n                title,\n                completed: false\n            })\n            .then(res => this.setState({\n                todos: [...this.state.todos, res.data]\n            }))\n\n    }\n    render() {\n\n        return ( \n            <Router> \n        <div className = \"App\" >\n            <div className=\"login\">\n                <Header/>\n                <Route path = \"/\"\n                   render = {props => ( \n                    <React.Fragment>\n                        <AddTodo addTodo = { this.addTodo }/>\n                        <Todos todos = { this.state.todos }\n                           markComplete = { this.markComplete }\n                           delTodo = { this.delTodo }/>\n                    </React.Fragment>\n                )}/> \n\n                <Route path = \"/about\" Component = { About }/>\n            </div>\n        </div> \n            </Router>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( \n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}